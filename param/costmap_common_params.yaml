max_obstacle_height: 2.0  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
#robot_radius: 0.4  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
footprint: [[0.3, 0.35], [-0.3, 0.35], [-0.3, -0.35], [0.3, -0.35]]  # if the robot is not circular如果机器人不是圆形的就设置各个定点的坐标
#footprint: [[1, 1], [-1, 1], [-1, -1], [1, -1]]

map_type: voxel

# 障碍物地图层
obstacle_layer:
  enabled:              true # 是否启用障碍物地图层
  max_obstacle_height:  2.0
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             10
  unknown_threshold:    15
  mark_threshold:       0.1
  combination_method:   1 # 只能设置为0或1，用来更新地图上的代价值，一般设置为1
  track_unknown_space:  true    #true needed for disabling global path planning through unknown space 如果设置成false的话，地图上的未知领域也会当成可以走的区域
  obstacle_range: 7 # 机器人检测障碍物的最大范围，设置1.5意味着在1.5米范围内检测到的障碍信息才会在地图上进行更新
  raytrace_range: 5.0 # 机器人检测自由空间的最大范围，设置为3.0意为在3米范围内，机器人将根据传感器的信息，清除范围内的自由空间
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 10
  publish_voxel_map: true
  observation_sources:  scan  # 代价地图需要关注的所有传感器信息，每一个传感器信息都将在后边列出详细信息。
  scan:
    data_type: LaserScan
    topic: /scan #scan or /scan?
    marking: true # marking和clearing是否需要使用传感器的实时信息来添加或清除代价地图中的障碍物信息
# 可以设置只让上面的scan进行marking和clearing，下面的只用导航
    clearing: true
    min_obstacle_height: -2.0 #scan data's real frame is head but it is broadcasted as base_link.
    max_obstacle_height: 2.0
    
#might able to add real laser data

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
# 增大比例因子反而会降低代价
  cost_scaling_factor:  0.5  # exponential rate at which the obstacle cost drops off (default: 10)



  inflation_radius:     0.3  # max. distance from an obstacle at which costs are incurred for planning paths. 膨胀半径，一般设置成机器人底盘的直径大小

# 静态地图层，一般是slam建好的地图
static_layer:
  enabled:              true 
  

